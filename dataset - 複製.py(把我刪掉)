import torch
import os
import librosa
import multiprocessing as mp
import logging
from typing import List
import numpy as np

class PineappleAudioOnlyData:

    def _get_mel_spectrogram(self, audio_file_path):
        audio, sr = librosa.load(audio_file_path, sr=None)
        mel_spectrogram = librosa.feature.melspectrogram(y=audio, sr=sr)
        return mel_spectrogram

    def __init__(self, path, label, cam):
        
        self.pineapple_id = str(int(os.path.basename(path)))

        logging.info(f'Transforming audio files in {path} to mel spectrograms...')
        self.cam1_pine_bottom_mic1_01 = self._get_mel_spectrogram(os.path.join(path, 'cam-1/pine-bottom/mic-1/cleaned_01.wav'))
        self.cam1_pine_bottom_mic1_02 = self._get_mel_spectrogram(os.path.join(path, 'cam-1/pine-bottom/mic-1/cleaned_02.wav'))
        self.cam1_pine_side_mic1_01 = self._get_mel_spectrogram(os.path.join(path, 'cam-1/pine-side/mic-1/cleaned_01.wav'))
        self.cam1_pine_side_mic1_02 = self._get_mel_spectrogram(os.path.join(path, 'cam-1/pine-side/mic-1/cleaned_02.wav'))
        self.cam2_pine_bottom_mic1_01 = self._get_mel_spectrogram(os.path.join(path, 'cam-2/pine-bottom/mic-1/cleaned_01.wav'))
        self.cam2_pine_bottom_mic1_02 = self._get_mel_spectrogram(os.path.join(path, 'cam-2/pine-bottom/mic-1/cleaned_02.wav'))
        self.cam2_pine_side_mic1_01 = self._get_mel_spectrogram(os.path.join(path, 'cam-2/pine-side/mic-1/cleaned_01.wav'))
        self.cam2_pine_side_mic1_02 = self._get_mel_spectrogram(os.path.join(path, 'cam-2/pine-side/mic-1/cleaned_02.wav'))
        logging.info(f'Transformation done!')
        
        # concatenate all the mel spectrograms as a 8 x 128 x 24 tensor
        if(cam == 1):
            self.vector = torch.cat((
                #torch.from_numpy(self.cam1_pine_bottom_mic1_01).unsqueeze(0),
                #torch.from_numpy(self.cam1_pine_bottom_mic1_02).unsqueeze(0),
                torch.from_numpy(self.cam1_pine_side_mic1_01).unsqueeze(0), 
                torch.from_numpy(self.cam1_pine_side_mic1_02).unsqueeze(0), 
                #torch.from_numpy(self.cam2_pine_bottom_mic1_01).unsqueeze(0), 
                #torch.from_numpy(self.cam2_pine_bottom_mic1_02).unsqueeze(0), 
                #torch.from_numpy(self.cam2_pine_side_mic1_01).unsqueeze(0), 
                #torch.from_numpy(self.cam2_pine_side_mic1_02).unsqueeze(0)
                ), dim=0)
        elif (cam == 2):
            self.vector = torch.cat((
                #torch.from_numpy(self.cam1_pine_bottom_mic1_01).unsqueeze(0),
                #torch.from_numpy(self.cam1_pine_bottom_mic1_02).unsqueeze(0),
                #torch.from_numpy(self.cam1_pine_side_mic1_01).unsqueeze(0), 
                #torch.from_numpy(self.cam1_pine_side_mic1_02).unsqueeze(0), 
                #torch.from_numpy(self.cam2_pine_bottom_mic1_01).unsqueeze(0), 
                #torch.from_numpy(self.cam2_pine_bottom_mic1_02).unsqueeze(0), 
                torch.from_numpy(self.cam2_pine_side_mic1_01).unsqueeze(0), 
                torch.from_numpy(self.cam2_pine_side_mic1_02).unsqueeze(0)
                ), dim=0)


        output_vector = np.zeros(4)
        output_vector[label] = 1
        self.label = torch.from_numpy(output_vector)
        

class PineappleAudioOnlyDataset(torch.utils.data.Dataset):

    def __init__(self, pineapples: List[PineappleAudioOnlyData], transform=None):
        self.pineapples = pineapples
        self.transform = transform

    def __len__(self):
        return len(self.pineapples)
    
    def __getitem__(self, index):
        if self.transform:
            return self.transform(self.pineapples[index].vector), self.pineapples[index].label

        return self.pineapples[index].vector, self.pineapples[index].label

def get_audio_only_dataset(transform):
    pineapples = []
    label_file = 'training/pineapple_training_label.csv'
    
    with open(label_file, 'r') as f:
        for line in f:
            # skip the header
            if line.startswith('ID'):
                continue
            line = line.strip()
            line = line.split(',')
            pineapple_id = line[0]
            label = int(line[1])

            # pineapple_id to four digit
            pineapple_id = str(int(pineapple_id)).zfill(4)
            pineapple_path = os.path.join('training', pineapple_id)

            pineapple1 = PineappleAudioOnlyData(pineapple_path, label,1)
            pineapple2 = PineappleAudioOnlyData(pineapple_path, label,2)
            pineapples.append(pineapple1)
            pineapples.append(pineapple2)
    
    dataset = PineappleAudioOnlyDataset(pineapples, transform=transform)
    return dataset

if __name__ == '__main__':
    #logging.basicConfig(level=logging.INFO, format='%(asctime)s - [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    dataset = get_audio_only_dataset(transform=None)

    print(dataset[0][0].shape)


        

